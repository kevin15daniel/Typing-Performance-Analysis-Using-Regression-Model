# -*- coding: utf-8 -*-
"""Typing Performance Analysis Using Regression Model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mkEgX87h61EDKdYp58ACD2AvZarCduFI
"""

import pandas as pd

df = pd.read_csv('MonkeyType.csv')
df

missing_values = df.isnull().sum()
print('Missing values: \n', missing_values)

import pandas as pd

df['_id'] = pd.Categorical(df['_id'])

df.describe()

x = df[['wpm', 'acc', 'rawWpm', 'consistency']]
y = df['timestamp']

print(x)

print(y)

from sklearn.linear_model import LinearRegression

model = LinearRegression()
model

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

model.fit(x_train, y_train)
y_pred = model.predict(x_test)

from sklearn.metrics import mean_squared_error

mse = mean_squared_error(y_test, y_pred)
print('Mean Squared Error (MSE): {:.2f}'.format(mse))

from sklearn.metrics import mean_squared_error
import numpy as np

rmse = np.sqrt(mean_squared_error(y_test, y_pred))
print('Root Mean Squared Error (RMSE): {:.2f}'.format(rmse))

import numpy as np

sse = np.sum((y_test - y_pred) ** 2)
print('Sum of Squared Error (SSE): {:.2f}'.format(sse))

r2 = model.score(x_test, y_test)
print('Coefficient of Determination (R2):', round(r2, 2))

import matplotlib.pyplot as plt
import pandas as pd

x = df[['wpm']]
y = df['rawWpm']

model.fit(x, y)
y_pred = model.predict(x)

plt.scatter(x, y, color='blue', marker='.')
plt.plot(x, y_pred, color='red')
plt.xlabel('WPM (x)')
plt.ylabel('rawWPM (y)')
plt.title('Regression Analysis of WPM vs rawWPM')
plt.show()

import matplotlib.pyplot as plt
import pandas as pd

x = df[['wpm']]
y = df['rawWpm']

plt.scatter(x, y, color='red', marker='.', label='WPM')
plt.scatter(y, x, color='green', marker='.', label='rawWPM')

plt.xlabel('WPM (x)')
plt.ylabel('rawWPM (y)')
plt.title('Comparison of WPM and rawWPM')
plt.legend()
plt.show()

import matplotlib.pyplot as plt
import pandas as pd

x = df['wpm']
y = df['rawWpm']

plt.hist(x, color='red', alpha=0.8, label='WPM')
plt.hist(y, color='green', alpha=0.8, label='rawWPM')

plt.xlabel('Accuracy (x)')
plt.ylabel('Consistency (y)')
plt.title('Comparison of WPM and rawWPM')
plt.legend()
plt.show()

import matplotlib.pyplot as plt
import pandas as pd

x = df[['acc']]
y = df['consistency']

model.fit(x, y)
y_pred = model.predict(x)

plt.scatter(x, y, color='blue', marker='.')
plt.plot(x, y_pred, color='red')
plt.xlabel('Accuracy (x)')
plt.ylabel('Consistency (y)')
plt.title('Regression Analysis of ACC vs CONSISTENCY')
plt.show()

import matplotlib.pyplot as plt
import pandas as pd

x = df[['acc']]
y = df['consistency']

plt.scatter(x, y, color='red', marker='.', label='Accuracy')
plt.scatter(y, x, color='green', marker='.', label='Consistency')

plt.xlabel('Accuracy (x)')
plt.ylabel('Consistency (y)')
plt.title('Comparison of ACC and CONSISTENCY')
plt.legend()
plt.show()

import matplotlib.pyplot as plt
import pandas as pd

x = df['acc']
y = df['consistency']

plt.hist(x, color='red', alpha=0.8, label='Accuracy')
plt.hist(y, color='green', alpha=0.8, label='Consistency')

plt.xlabel('Accuracy (x)')
plt.ylabel('Consistency (y)')
plt.title('Comparison of ACC and CONSISTENCY')
plt.legend()
plt.show()

input_value = int(input('Enter the CSV dataset: '))
predicted_value = sse + r2 * input_value
print('The predicted value for input {0} is {1}'.format(input_value, predicted_value))

import pandas as pd

num_rows, num_columns = df.shape
print(f'Number of rows: {num_rows}')
print(f'Number of columns: {num_columns}')

import pandas as pd

count_0 = (df['restartCount'] == 0).sum()
count_1 = (df['restartCount'] == 1).sum()
print(f"Number of times 0 appears in 'restartCount': {count_0}")
print(f"Number of times 1 appears in 'restartCount': {count_1}")

import pandas as pd

df['testDuration'] = df['testDuration'].astype(float)
total_time = df['testDuration'].sum()
print(f'The total time spent on typing is {total_time} seconds.')

import pandas as pd

df[['wpm', 'acc', 'testDuration']] = df[['wpm', 'acc', 'testDuration']].astype(float)

df_15 = df[df['testDuration'] == 15]
df_30 = df[df['testDuration'] == 30]
df_60 = df[df['testDuration'] == 60]

max_wpm_15 = df_15[df_15['acc'] == df_15['acc'].max()]['wpm'].max()
max_wpm_30 = df_30[df_30['acc'] == df_30['acc'].max()]['wpm'].max()
max_wpm_60 = df_60[df_60['acc'] == df_60['acc'].max()]['wpm'].max()

print(f'The highest accuracy WPM for 15 seconds is {max_wpm_15}')
print(f'The highest accuracy WPM for 30 seconds is {max_wpm_30}')
print(f'The highest accuracy WPM for 60 seconds is {max_wpm_60}')

count_100_accuracy = df[df['acc'] == 100].shape[0]
print(f'The accuracy is 100 a total of {count_100_accuracy} times.')

import pandas as pd

df_15_sec = df[df['testDuration'] == 15]
highest_wpm = df_15_sec['wpm'].max()
print(f'The highest WPM in 15 seconds is {highest_wpm}')

import pandas as pd

average_wpm = df['wpm'].mean()
print(f'The average WPM is {average_wpm:.2f}')

import pandas as pd

highest_raw_wpm = df['rawWpm'].max()
print(f'The highest raw WPM is {highest_raw_wpm}')

import pandas as pd

average_raw_wpm = df['rawWpm'].mean()
print(f'The average raw WPM is {average_raw_wpm:.2f}')

import pandas as pd

highest_accuracy = df['acc'].max()
print(f'The highest accuracy is {highest_accuracy}')

import pandas as pd

average_accuracy = df['acc'].mean()
print(f'The average accuracy is {average_accuracy:.2f}')

import pandas as pd

highest_consistency = df['consistency'].max()
print(f'The highest consistency is {highest_consistency}')

import pandas as pd

average_consistency = df['consistency'].mean()
print(f'The average consistency is {average_consistency:.2f}')

import pandas as pd

df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
df['date'] = df['timestamp'].dt.date
typing_dates = df['date'].unique()
all_dates = pd.date_range(start=min(typing_dates), end=max(typing_dates))
missed_dates = all_dates.difference(typing_dates)

print('Dates with missed typing:')
for date in missed_dates:
    print(date.strftime('%Y-%m-%d'))

import pandas as pd
import matplotlib.pyplot as plt

df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')

plt.figure(figsize=(10, 6))
plt.bar(df['timestamp'], df['consistency'], color='red', width=0.5)
plt.xlabel('Date (x)')
plt.ylabel('Consistency (y)')
plt.title('CONSISTENCY OVER TIME')
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')

plt.figure(figsize=(10, 6))
plt.scatter(df['timestamp'], df['consistency'], color='green', marker='.', s=30)
plt.xlabel('Date (x)')
plt.ylabel('Consistency (y)')
plt.title('CONSISTENCY OVER TIME')
plt.show()